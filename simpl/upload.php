<?php/*** Base Upload Class** Upload Class Used for Uploading all kinds of* Files, can be extended to fit specific needs*/class Upload extends File {	/**	* @var string	*/	var $name;	/**	* @var string	*/	var $type;	/**	* @var string	*/	var $tmp_name;	/**	* @var int	*/	var $error;	/**	* @var int	*/	var $size;	/**	* @var string	*/	var $directory;	/**	* Class Constructor	*	* Creates a upload object from form data	*	* @param mixed	* @return NULL	*/	function Upload($data, $directory=''){		$this->name = $data['name'];		$this->type = $data['type'];		$this->tmp_name = $data['tmp_name'];		$this->error = $data['error'];		$this->size = $data['size'];		$this->directory = $directory;	}	/**	* Checks the FILE data for and errors, overloads the Form CheckData	* $acceptedTypes = array of acceptable file types	* $max_size = int size of file in bytes	* <code>	* <?php	* define(MAX_SIZE,1500000);	* $image_types = array('image/jpeg','image/gif','image/png','image/pjpeg');	* ?>	* </code>	* @param array, int in bytes	* @return array	*/	function CheckData($acceptedTypes, $max_size){		// Make sure that we have something to check first		if ($this->name != ''){			// Check to see if the dirstory is writable			if (!is_writable($this->directory)){				// Try to make it writable				$path = '';				foreach( split('/', $this->directory) as $data ){					$path .= $data . '/';					if ( !file_exists($path) ){						umask(000);						mkdir($path,0777);					}				}			}			if (!is_writable($this->directory))				$error = 'Directory is not writable, please check with the systems administrator';					// Check file types			if (!in_array($this->type,$acceptedTypes))				$error = 'This type of file is not permitted, Please try again';			else if ($this->size == 0)				$error = 'The filesize is zero, Please try again';			else if ($this->size > $max_size)				$error = 'The filesize is too large, ' . $max_size . ' bytes is filesize limit, Please try again';		}				// Return the Errors		return $error;	}	/**	* Formats $this->name and saves it to itself	* @param $this->name is not NULL	* @return NULL	*/	function FormatFilename(){		// Local original		$orig = $this->name;				// Make Lowercase		$this->name = strtolower($this->name);		// Seperate by dots		$pieces = explode('.', $this->name);		// Get the extension		$fext  = array_pop($pieces);		// Get only the filename		$fname = basename($this->name, '.' . $fext);		// Cut out bad chars		$bad_chars = array(' ', "'", '\'', '(', ')', '*', '!', '/', ',', '&', '|', '{', '}', '[', ']', '+', '=', '<', '>');		$fname = str_replace($bad_chars, '_', $fname);		// Remove doubles		$fname = str_replace('__', '', $fname);		// Loop through the directory to make sure there is no duplicates		$i = 1;		while ( file_exists($this->directory . $fname . '.' . $fext) ){			// If already had a number appended cut it off			if ($i > 1)				$fname = substr($fname, 0, -2);			// Add a number to the end of the file			$fname =  $fname . '_' . $i;			$i++;		}		// Recreate the file name with extention		$this->name = $fname . '.' . $fext;				// Output some Debug information		Debug('FormatFilename(), Original Filename: "' . $orig . '" Changed to: "' . $this->name . '"');				// Return that the filename is ready for upload		return true;	}	/**	* Upload File	*	* Moves the file from its temp location and puts it into the directory that is set	*	* @return BOOL true/false if the item was uploaded successfully	*/	function UploadFile(){		// Format the filename to make sure it is directory safe		$this->FormatFilename();				// Upload the file		if ( move_uploaded_file($this->tmp_name, $this->directory . $this->name) ) {			Debug('UploadFile(), File moved successfully to: "' . $this->directory . $this->name . '"');			// Make sure it is in the right spot			if ( file_exists($this->directory . $this->name) ){ 				// Change the permissions so the file is not locked				chmod($this->directory . $this->name, 0777);				// Return if the file is uploaded successfully				if (is_writable($this->directory . $this->name)){					Debug('UploadFile(), Is Writable! "' . $this->directory . $this->name . '"');					return true;				}else{					Debug('UploadFile(), Is NOT Writable! "' . $this->directory . $this->name . '"');				}			}		}		// There must have been some issue		return false;	}		/**	* Field Class	*	* Used to display the upload form or the file that was uploaded	* 	* @param none	* @return bool	**/	function Field(){		echo '<input name="upload" type="file">';	}		/**	* Delete File	*	* Delete the file from the server	* 	* @param none	* @return bool	**/	function Delete(){		// Check to make sure that there is a file to delete		if ($this->name != ''){			// Remove the File			@unlink($this->directory . $this->name);			// Double check on return			return (!is_file($this->directory . $this->name));		}				return false;	}		/**	* Get the current files extension	* 	* @param	* @return string	**/	function GetExtension(){		// Make sure this name is set		if (trim($this->name) == '')			return false;		// Split the filename in dots		$pieces = explode('.', $this->name);		Debug('GetExtension(), Pieces: ' . $pieces);		// Get the extension		return array_pop($pieces);	}		/**	* Rename a file and keep it in the same directory	* 	* @param string	* @return bool	**/	function Rename($newname){		// Make sure this name is set		if (trim($this->name) == '')			return false;		// Save the old name		$old_name = $this->name;		// Set the New Name		$this->name = $newname;		// Format the filename		$this->FormatFilename();		// Rename and set the new name if true		if (!$this->Move($this->directory . $old_name, $this->directory . $this->name))			$this->name = $old_name;		// Output the Debug		Debug('Rename(), From: "' . $old_name . '" To: "' . $this->name . '"');		return (!rename($this->directory . $old_name, $this->directory . $this->name))?false:true;	}		/**	* Copy a file from one directory to another	* 	* @param string, string	* @return bool	**/	function Copy($original, $destination){		Debug('Copy(), From: "' . $original . '" To: "' . $destination . '"');		return (!copy($original, $destination))?false:true;	}		/**	* Move a file from one directory to another	* 	* @param string, string	* @return bool	**/	function Move($original, $destination){		Debug('Move(), From: "' . $original . '" To: "' . $destination . '"');		return (rename($original, $destination))?true:false;	}}?>